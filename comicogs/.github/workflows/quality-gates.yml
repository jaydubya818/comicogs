name: Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual trigger

jobs:
  api-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: comicogs_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Setup database
        run: |
          cd backend
          npm run db:setup
          npx prisma db push
          npm run db:seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/comicogs_test

      - name: Start backend server
        run: |
          cd backend
          npm run dev &
          sleep 10 # Wait for server to start
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/comicogs_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-for-ci
          STRIPE_SECRET_KEY: sk_test_placeholder
          STRIPE_WEBHOOK_SECRET: whsec_placeholder
          EMAIL_FROM: "Comicogs CI <ci@comicogs.com>"
          NEXT_PUBLIC_SITE_URL: "http://localhost:3000"
          NEXT_PUBLIC_API_URL: "http://localhost:4000"
          NODE_ENV: test

      - name: Wait for server to be ready
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:4000/api > /dev/null 2>&1; then
              echo "Server is ready"
              break
            fi
            echo "Waiting for server... ($i/30)"
            sleep 2
          done

      - name: Generate golden dataset
        run: |
          cd backend
          npm run golden:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/comicogs_test

      - name: Run API assertions
        run: |
          cd backend
          npm run test:golden
        env:
          API_BASE_URL: http://localhost:4000

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-test-results
          path: |
            backend/golden-queries.json
            backend/api-test-results-*.json

  frontend-build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Type check
        run: |
          cd frontend
          npm run type-check

      - name: Lint
        run: |
          cd frontend
          npm run lint

      - name: Build
        run: |
          cd frontend
          npm run build

  storybook-tests:
    runs-on: ubuntu-latest
    needs: [frontend-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Generate stories from golden queries
        run: |
          cd frontend
          npm run storybook:generate
        continue-on-error: true # Golden queries might not exist yet

      - name: Build Storybook
        run: |
          cd frontend
          npm run build-storybook

      - name: Install Playwright for Storybook
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Start Storybook
        run: |
          cd frontend
          npx serve storybook-static -p 6006 &
          sleep 5
        
      - name: Run Storybook visual tests
        run: |
          cd frontend
          npx playwright test --project=storybook-light --project=storybook-dark
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:6006

      - name: Upload Storybook test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: storybook-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/

  integration-tests:
    runs-on: ubuntu-latest
    needs: [api-tests, frontend-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Install Playwright
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Setup services
        run: |
          docker-compose -f docker-compose.dev.yml up -d db redis

      - name: Setup database
        run: |
          cd backend
          npm run db:setup
          npx prisma db push
          npm run db:seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5433/comicogs

      - name: Start backend and frontend
        run: |
          cd backend
          npm run dev &
          cd ../frontend
          npm run dev &
          sleep 15
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5433/comicogs
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-for-ci
          STRIPE_SECRET_KEY: sk_test_placeholder
          STRIPE_WEBHOOK_SECRET: whsec_placeholder
          EMAIL_FROM: "Comicogs CI <ci@comicogs.com>"
          NEXT_PUBLIC_SITE_URL: "http://localhost:3000"
          NEXT_PUBLIC_API_URL: "http://localhost:4000"

      - name: Run E2E tests
        run: |
          cd frontend
          npx playwright test --project=app-light --project=app-dark
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/

  # Security and quality checks
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run security audit (backend)
        run: |
          cd backend
          npm audit --audit-level=moderate

      - name: Run security audit (frontend)
        run: |
          cd frontend
          npm audit --audit-level=moderate

      - name: Check for outdated packages
        run: |
          cd backend
          npm outdated || true
          cd ../frontend
          npm outdated || true
