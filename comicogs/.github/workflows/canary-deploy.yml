name: Canary Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      canary_percentage:
        description: 'Percentage of traffic for canary (1-100)'
        required: false
        default: '10'
        type: string
      rollback_on_error:
        description: 'Automatically rollback on health check failure'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=canary-{{sha}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  canary-deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy canary to staging
        id: deploy-canary
        run: |
          echo "üöÄ Deploying canary version..."
          
          # Set canary image tag
          CANARY_TAG="${{ needs.build.outputs.image-tag }}"
          echo "canary-tag=${CANARY_TAG}" >> $GITHUB_OUTPUT
          
          # Deploy to staging environment first
          # This could be ECS, Kubernetes, Docker Compose, etc.
          # Example with docker-compose:
          
          export CANARY_IMAGE="${CANARY_TAG}"
          export ENVIRONMENT="staging"
          
          # Create canary docker-compose override
          cat > docker-compose.canary.yml << EOF
          version: '3.8'
          services:
            backend-canary:
              image: ${CANARY_IMAGE}
              environment:
                - NODE_ENV=staging
                - API_PORT=4001
                - FLAG_PAYMENTS=on
                - FLAG_SEARCH=on
                - FLAG_EMAIL=on
              ports:
                - "4001:4001"
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:4001/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
          EOF
          
          echo "‚úÖ Canary deployment configuration ready"

      - name: Run canary health checks
        id: health-check
        run: |
          echo "üè• Running canary health checks..."
          
          CANARY_URL="http://localhost:4001"
          MAX_ATTEMPTS=10
          ATTEMPT=1
          
          # Wait for canary to be ready
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Health check attempt $ATTEMPT/$MAX_ATTEMPTS..."
            
            if curl -f "${CANARY_URL}/health" > /dev/null 2>&1; then
              echo "‚úÖ Canary health check passed"
              break
            fi
            
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "‚ùå Canary health check failed after $MAX_ATTEMPTS attempts"
              echo "health-status=failed" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            sleep 30
            ATTEMPT=$((ATTEMPT + 1))
          done
          
          echo "health-status=passed" >> $GITHUB_OUTPUT

      - name: Run smoke tests on canary
        id: smoke-tests
        run: |
          echo "üß™ Running smoke tests on canary..."
          
          CANARY_URL="http://localhost:4001"
          
          # Test critical endpoints
          echo "Testing health endpoint..."
          curl -f "${CANARY_URL}/health" | jq '.ok' | grep -q "true"
          
          echo "Testing metrics endpoint..."
          curl -f "${CANARY_URL}/metrics" > /dev/null
          
          echo "Testing API info endpoint..."
          curl -f "${CANARY_URL}/api" | jq '.status' | grep -q "running"
          
          # Test feature flags
          echo "Testing feature flag headers..."
          curl -I "${CANARY_URL}/api" | grep -q "X-Feature-"
          
          echo "‚úÖ All smoke tests passed"
          echo "smoke-status=passed" >> $GITHUB_OUTPUT

      - name: Monitor canary performance
        id: performance-check
        run: |
          echo "üìä Monitoring canary performance..."
          
          CANARY_URL="http://localhost:4001"
          
          # Simple performance test
          echo "Running performance test..."
          for i in {1..10}; do
            start_time=$(date +%s.%N)
            curl -s "${CANARY_URL}/health" > /dev/null
            end_time=$(date +%s.%N)
            duration=$(echo "$end_time - $start_time" | bc)
            echo "Request $i: ${duration}s"
            
            # Fail if any request takes > 5 seconds
            if (( $(echo "$duration > 5.0" | bc -l) )); then
              echo "‚ùå Performance test failed - request took ${duration}s"
              echo "performance-status=failed" >> $GITHUB_OUTPUT
              exit 1
            fi
          done
          
          echo "‚úÖ Performance test passed"
          echo "performance-status=passed" >> $GITHUB_OUTPUT

      - name: Calculate deployment decision
        id: deploy-decision
        run: |
          HEALTH_STATUS="${{ steps.health-check.outputs.health-status }}"
          SMOKE_STATUS="${{ steps.smoke-tests.outputs.smoke-status }}"
          PERFORMANCE_STATUS="${{ steps.performance-check.outputs.performance-status }}"
          
          echo "üìã Deployment Decision Matrix:"
          echo "  Health: ${HEALTH_STATUS}"
          echo "  Smoke Tests: ${SMOKE_STATUS}"
          echo "  Performance: ${PERFORMANCE_STATUS}"
          
          if [[ "${HEALTH_STATUS}" == "passed" && "${SMOKE_STATUS}" == "passed" && "${PERFORMANCE_STATUS}" == "passed" ]]; then
            echo "‚úÖ All checks passed - PROMOTING to production"
            echo "decision=promote" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Some checks failed - ROLLING BACK"
            echo "decision=rollback" >> $GITHUB_OUTPUT
          fi

  promote-to-production:
    needs: [build, canary-deploy]
    runs-on: ubuntu-latest
    environment: production
    if: needs.canary-deploy.outputs.decision == 'promote'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to production
        run: |
          echo "üöÄ Promoting canary to production..."
          
          PRODUCTION_TAG="${{ needs.build.outputs.image-tag }}"
          
          # Blue-green deployment strategy
          # This would typically involve:
          # 1. Deploy to green environment
          # 2. Run health checks
          # 3. Switch traffic from blue to green
          # 4. Keep blue as rollback option
          
          echo "‚úÖ Production deployment completed"
          echo "üîó Production URL: https://api.comicogs.com"

      - name: Run production verification
        run: |
          echo "üîç Verifying production deployment..."
          
          PROD_URL="https://api.comicogs.com"
          
          # Wait for load balancer to update
          sleep 60
          
          # Verify production health
          curl -f "${PROD_URL}/health" | jq '.ok' | grep -q "true"
          
          # Verify feature flags are working
          curl -f "${PROD_URL}/api" | jq '.status' | grep -q "running"
          
          echo "‚úÖ Production verification passed"

      - name: Notify deployment success
        run: |
          echo "üéâ Deployment successful!"
          echo "üìä Deployment summary:"
          echo "  - Image: ${{ needs.build.outputs.image-tag }}"
          echo "  - Digest: ${{ needs.build.outputs.image-digest }}"
          echo "  - Environment: production"
          echo "  - Status: promoted from canary"

  rollback:
    needs: [canary-deploy]
    runs-on: ubuntu-latest
    if: always() && needs.canary-deploy.outputs.decision == 'rollback'
    
    steps:
      - name: Rollback deployment
        run: |
          echo "üîÑ Rolling back failed canary deployment..."
          
          # Stop canary containers
          # Restore previous version
          # This would be environment-specific
          
          echo "‚úÖ Rollback completed"

      - name: Notify rollback
        run: |
          echo "‚ö†Ô∏è  Canary deployment rolled back"
          echo "üìä Rollback summary:"
          echo "  - Reason: Failed health/smoke/performance checks"
          echo "  - Action: Canary terminated, production unchanged"
          echo "  - Status: Previous version remains active"

  cleanup:
    needs: [canary-deploy, promote-to-production, rollback]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Cleanup canary resources
        run: |
          echo "üßπ Cleaning up canary deployment resources..."
          
          # Remove canary containers
          # Clean up temporary resources
          # Update monitoring dashboards
          
          echo "‚úÖ Cleanup completed"
