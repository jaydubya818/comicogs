#!/bin/bash

# Comicogs Platform - Comprehensive Update Verification Script
# Generated by DevOps Agent

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Global variables
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
REPORT_FILE="/tmp/comicogs_verification_report.md"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
EXIT_CODE=0

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
    EXIT_CODE=1
}

# Initialize report
init_report() {
    cat > "$REPORT_FILE" << EOF
# Comicogs Platform Verification Report
**Generated**: $TIMESTAMP  
**Branch**: $(git branch --show-current 2>/dev/null || echo "unknown")  
**Commit**: $(git rev-parse --short HEAD 2>/dev/null || echo "unknown")  

## Executive Summary
EOF
}

# Check if required tools are available
check_prerequisites() {
    log_info "Checking prerequisites..."
    
    local missing_tools=()
    
    # Required tools
    command -v node >/dev/null || missing_tools+=("node")
    command -v npm >/dev/null || missing_tools+=("npm")
    command -v git >/dev/null || missing_tools+=("git")
    
    # Optional but recommended tools
    command -v docker >/dev/null || log_warning "Docker not found - container tests will be skipped"
    command -v npx >/dev/null || missing_tools+=("npx")
    
    if [ ${#missing_tools[@]} -ne 0 ]; then
        log_error "Missing required tools: ${missing_tools[*]}"
        return 1
    fi
    
    log_success "All prerequisites available"
    return 0
}

# Verify TypeScript and ESLint
verify_static_analysis() {
    log_info "Running static analysis..."
    
    cd "$PROJECT_ROOT/comicogs-nextjs" || return 1
    
    echo "### Static Analysis Results" >> "$REPORT_FILE"
    
    # TypeScript check
    log_info "Checking TypeScript..."
    if npx tsc --noEmit --project tsconfig.json > /tmp/tsc_output.txt 2>&1; then
        log_success "TypeScript check passed"
        echo "- ✅ **TypeScript**: No type errors" >> "$REPORT_FILE"
    else
        log_error "TypeScript check failed"
        echo "- ❌ **TypeScript**: Type errors found" >> "$REPORT_FILE"
        echo "\`\`\`" >> "$REPORT_FILE"
        cat /tmp/tsc_output.txt >> "$REPORT_FILE"
        echo "\`\`\`" >> "$REPORT_FILE"
    fi
    
    # ESLint check
    log_info "Running ESLint..."
    if npx eslint . --ext .ts,.tsx,.js,.jsx --max-warnings 0 > /tmp/eslint_output.txt 2>&1; then
        log_success "ESLint check passed"
        echo "- ✅ **ESLint**: No linting errors" >> "$REPORT_FILE"
    else
        log_warning "ESLint found issues"
        echo "- ⚠️ **ESLint**: Linting issues found" >> "$REPORT_FILE"
        echo "\`\`\`" >> "$REPORT_FILE"
        head -20 /tmp/eslint_output.txt >> "$REPORT_FILE"
        echo "\`\`\`" >> "$REPORT_FILE"
    fi
    
    # Prisma validation
    log_info "Validating Prisma schema..."
    if npx prisma validate > /tmp/prisma_output.txt 2>&1; then
        log_success "Prisma schema valid"
        echo "- ✅ **Prisma**: Schema validation passed" >> "$REPORT_FILE"
    else
        log_error "Prisma schema validation failed"
        echo "- ❌ **Prisma**: Schema validation failed" >> "$REPORT_FILE"
        echo "\`\`\`" >> "$REPORT_FILE"
        cat /tmp/prisma_output.txt >> "$REPORT_FILE"
        echo "\`\`\`" >> "$REPORT_FILE"
    fi
    
    cd "$PROJECT_ROOT"
}

# Build verification
verify_build() {
    log_info "Verifying build process..."
    
    cd "$PROJECT_ROOT/comicogs-nextjs" || return 1
    
    echo "### Build Verification" >> "$REPORT_FILE"
    
    # Clean build
    log_info "Performing clean build..."
    rm -rf node_modules .next || true
    
    if npm install > /tmp/npm_install.txt 2>&1; then
        log_success "Dependencies installed successfully"
        echo "- ✅ **Dependencies**: Installation successful" >> "$REPORT_FILE"
    else
        log_error "Dependency installation failed"
        echo "- ❌ **Dependencies**: Installation failed" >> "$REPORT_FILE"
        echo "\`\`\`" >> "$REPORT_FILE"
        tail -20 /tmp/npm_install.txt >> "$REPORT_FILE"
        echo "\`\`\`" >> "$REPORT_FILE"
        return 1
    fi
    
    # Build application
    if npm run build > /tmp/build_output.txt 2>&1; then
        log_success "Build completed successfully"
        echo "- ✅ **Build**: Compilation successful" >> "$REPORT_FILE"
        
        # Check bundle size
        if [ -d ".next" ]; then
            local bundle_size=$(du -sh .next 2>/dev/null | cut -f1 || echo "unknown")
            echo "- 📦 **Bundle Size**: $bundle_size" >> "$REPORT_FILE"
        fi
    else
        log_error "Build failed"
        echo "- ❌ **Build**: Compilation failed" >> "$REPORT_FILE"
        echo "\`\`\`" >> "$REPORT_FILE"
        tail -50 /tmp/build_output.txt >> "$REPORT_FILE"
        echo "\`\`\`" >> "$REPORT_FILE"
    fi
    
    cd "$PROJECT_ROOT"
}

# Test suite execution
verify_tests() {
    log_info "Running test suite..."
    
    cd "$PROJECT_ROOT/comicogs-nextjs" || return 1
    
    echo "### Test Results" >> "$REPORT_FILE"
    
    # Check if test scripts exist
    if ! npm run | grep -q "test"; then
        log_warning "No test scripts found in package.json"
        echo "- ⚠️ **Tests**: No test scripts configured" >> "$REPORT_FILE"
        cd "$PROJECT_ROOT"
        return 0
    fi
    
    # Run unit tests
    log_info "Running unit tests..."
    if npm test -- --watchAll=false --coverage --passWithNoTests > /tmp/test_output.txt 2>&1; then
        log_success "Unit tests passed"
        echo "- ✅ **Unit Tests**: All tests passed" >> "$REPORT_FILE"
        
        # Extract coverage information if available
        if grep -q "Coverage" /tmp/test_output.txt; then
            echo "\`\`\`" >> "$REPORT_FILE"
            grep -A 10 "Coverage" /tmp/test_output.txt >> "$REPORT_FILE" || true
            echo "\`\`\`" >> "$REPORT_FILE"
        fi
    else
        log_error "Unit tests failed"
        echo "- ❌ **Unit Tests**: Tests failed" >> "$REPORT_FILE"
        echo "\`\`\`" >> "$REPORT_FILE"
        tail -30 /tmp/test_output.txt >> "$REPORT_FILE"
        echo "\`\`\`" >> "$REPORT_FILE"
    fi
    
    # Run E2E tests if Playwright is configured
    if [ -f "playwright.config.ts" ] || [ -f "playwright.config.js" ]; then
        log_info "Running E2E tests..."
        if npx playwright test --reporter=list > /tmp/e2e_output.txt 2>&1; then
            log_success "E2E tests passed"
            echo "- ✅ **E2E Tests**: All tests passed" >> "$REPORT_FILE"
        else
            log_warning "E2E tests failed or skipped"
            echo "- ⚠️ **E2E Tests**: Tests failed or skipped" >> "$REPORT_FILE"
            echo "\`\`\`" >> "$REPORT_FILE"
            tail -20 /tmp/e2e_output.txt >> "$REPORT_FILE"
            echo "\`\`\`" >> "$REPORT_FILE"
        fi
    else
        log_info "No E2E test configuration found"
        echo "- ℹ️ **E2E Tests**: Not configured" >> "$REPORT_FILE"
    fi
    
    cd "$PROJECT_ROOT"
}

# Security checks
verify_security() {
    log_info "Running security checks..."
    
    cd "$PROJECT_ROOT/comicogs-nextjs" || return 1
    
    echo "### Security Analysis" >> "$REPORT_FILE"
    
    # npm audit
    log_info "Running npm audit..."
    if npm audit --audit-level moderate > /tmp/audit_output.txt 2>&1; then
        log_success "No moderate or high security vulnerabilities"
        echo "- ✅ **npm audit**: No moderate+ vulnerabilities" >> "$REPORT_FILE"
    else
        log_warning "Security vulnerabilities found"
        echo "- ⚠️ **npm audit**: Vulnerabilities detected" >> "$REPORT_FILE"
        echo "\`\`\`" >> "$REPORT_FILE"
        head -30 /tmp/audit_output.txt >> "$REPORT_FILE"
        echo "\`\`\`" >> "$REPORT_FILE"
    fi
    
    # Check for common security issues in environment files
    log_info "Checking for exposed secrets..."
    local secret_issues=0
    
    # Check for committed .env files
    if find . -name ".env*" -not -name ".env.example" -not -name ".env.local.example" | grep -v node_modules | head -5; then
        log_warning "Found potential environment files in repository"
        echo "- ⚠️ **Environment Files**: Potential secrets in repository" >> "$REPORT_FILE"
        secret_issues=$((secret_issues + 1))
    fi
    
    # Check for hardcoded API keys or secrets in code
    if grep -r "api_key\|secret\|password\|token" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" . | grep -v node_modules | grep -v ".next" | head -5 > /tmp/secrets_check.txt; then
        if [ -s /tmp/secrets_check.txt ]; then
            log_warning "Potential hardcoded secrets found"
            echo "- ⚠️ **Hardcoded Secrets**: Potential secrets in code" >> "$REPORT_FILE"
            secret_issues=$((secret_issues + 1))
        fi
    fi
    
    if [ $secret_issues -eq 0 ]; then
        log_success "No obvious secret exposure detected"
        echo "- ✅ **Secret Scanning**: No obvious exposures" >> "$REPORT_FILE"
    fi
    
    cd "$PROJECT_ROOT"
}

# Performance checks
verify_performance() {
    log_info "Running performance checks..."
    
    cd "$PROJECT_ROOT/comicogs-nextjs" || return 1
    
    echo "### Performance Analysis" >> "$REPORT_FILE"
    
    # Bundle analysis
    if [ -d ".next" ]; then
        log_info "Analyzing bundle size..."
        
        # Get total build size
        local build_size=$(du -sh .next 2>/dev/null | cut -f1 || echo "unknown")
        echo "- 📦 **Build Size**: $build_size" >> "$REPORT_FILE"
        
        # Check for large chunks if Next.js build exists
        if [ -d ".next/static/chunks" ]; then
            echo "- 🔍 **Large Chunks**:" >> "$REPORT_FILE"
            find .next/static/chunks -name "*.js" -size +500k -exec ls -lh {} \; | awk '{print "  - " $9 ": " $5}' >> "$REPORT_FILE" || true
        fi
        
        log_success "Bundle analysis completed"
    else
        log_warning "No build output found for bundle analysis"
        echo "- ⚠️ **Bundle Analysis**: No build output available" >> "$REPORT_FILE"
    fi
    
    # Check for performance-related packages
    if grep -q "lighthouse\|web-vitals" package.json; then
        echo "- ✅ **Performance Monitoring**: Performance packages detected" >> "$REPORT_FILE"
    else
        echo "- ℹ️ **Performance Monitoring**: Consider adding performance monitoring" >> "$REPORT_FILE"
    fi
    
    cd "$PROJECT_ROOT"
}

# Database migration check
verify_database() {
    log_info "Verifying database setup..."
    
    cd "$PROJECT_ROOT/comicogs-nextjs" || return 1
    
    echo "### Database Verification" >> "$REPORT_FILE"
    
    # Check if Prisma is configured
    if [ -f "prisma/schema.prisma" ]; then
        log_info "Found Prisma schema, checking migrations..."
        
        # Generate Prisma client to ensure schema is valid
        if npx prisma generate > /tmp/prisma_generate.txt 2>&1; then
            log_success "Prisma client generated successfully"
            echo "- ✅ **Prisma Client**: Generated successfully" >> "$REPORT_FILE"
        else
            log_error "Prisma client generation failed"
            echo "- ❌ **Prisma Client**: Generation failed" >> "$REPORT_FILE"
            echo "\`\`\`" >> "$REPORT_FILE"
            cat /tmp/prisma_generate.txt >> "$REPORT_FILE"
            echo "\`\`\`" >> "$REPORT_FILE"
        fi
        
        # Check migration status (if DATABASE_URL is available)
        if [ -n "${DATABASE_URL:-}" ]; then
            log_info "Checking migration status..."
            if npx prisma migrate status > /tmp/migrate_status.txt 2>&1; then
                echo "- ℹ️ **Migration Status**:" >> "$REPORT_FILE"
                echo "\`\`\`" >> "$REPORT_FILE"
                cat /tmp/migrate_status.txt >> "$REPORT_FILE"
                echo "\`\`\`" >> "$REPORT_FILE"
            fi
        else
            echo "- ℹ️ **Migration Status**: DATABASE_URL not available for checking" >> "$REPORT_FILE"
        fi
    else
        echo "- ℹ️ **Database**: No Prisma schema found" >> "$REPORT_FILE"
    fi
    
    cd "$PROJECT_ROOT"
}

# Environment configuration check
verify_environment() {
    log_info "Verifying environment configuration..."
    
    cd "$PROJECT_ROOT/comicogs-nextjs" || return 1
    
    echo "### Environment Configuration" >> "$REPORT_FILE"
    
    # Check for required environment files
    if [ -f ".env.example" ]; then
        log_success "Environment example file found"
        echo "- ✅ **Environment Template**: .env.example present" >> "$REPORT_FILE"
        
        # Count required environment variables
        local env_vars=$(grep -c "=" .env.example 2>/dev/null || echo "0")
        echo "- 📝 **Environment Variables**: $env_vars variables defined" >> "$REPORT_FILE"
    else
        log_warning "No .env.example file found"
        echo "- ⚠️ **Environment Template**: No .env.example file" >> "$REPORT_FILE"
    fi
    
    # Check for Next.js configuration
    if [ -f "next.config.js" ] || [ -f "next.config.mjs" ] || [ -f "next.config.ts" ]; then
        log_success "Next.js configuration found"
        echo "- ✅ **Next.js Config**: Configuration file present" >> "$REPORT_FILE"
    else
        echo "- ℹ️ **Next.js Config**: Using default configuration" >> "$REPORT_FILE"
    fi
    
    # Check for TypeScript configuration
    if [ -f "tsconfig.json" ]; then
        echo "- ✅ **TypeScript Config**: tsconfig.json present" >> "$REPORT_FILE"
    fi
    
    # Check for Tailwind configuration
    if [ -f "tailwind.config.js" ] || [ -f "tailwind.config.ts" ]; then
        echo "- ✅ **Tailwind Config**: Configuration present" >> "$REPORT_FILE"
    fi
    
    cd "$PROJECT_ROOT"
}

# Git and repository checks
verify_repository() {
    log_info "Verifying repository status..."
    
    echo "### Repository Status" >> "$REPORT_FILE"
    
    # Current branch and commit
    local current_branch=$(git branch --show-current 2>/dev/null || echo "unknown")
    local current_commit=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
    local commit_message=$(git log -1 --pretty=format:"%s" 2>/dev/null || echo "unknown")
    
    echo "- 🌿 **Branch**: $current_branch" >> "$REPORT_FILE"
    echo "- 📝 **Commit**: $current_commit" >> "$REPORT_FILE"
    echo "- 💬 **Message**: $commit_message" >> "$REPORT_FILE"
    
    # Check for uncommitted changes
    if git diff --quiet && git diff --cached --quiet; then
        echo "- ✅ **Working Directory**: Clean" >> "$REPORT_FILE"
    else
        echo "- ⚠️ **Working Directory**: Uncommitted changes present" >> "$REPORT_FILE"
    fi
    
    # Check for untracked files
    local untracked=$(git ls-files --others --exclude-standard | wc -l)
    if [ "$untracked" -eq 0 ]; then
        echo "- ✅ **Untracked Files**: None" >> "$REPORT_FILE"
    else
        echo "- ℹ️ **Untracked Files**: $untracked files" >> "$REPORT_FILE"
    fi
    
    log_success "Repository status checked"
}

# Generate final report summary
generate_summary() {
    log_info "Generating verification summary..."
    
    # Count successes and failures from the report
    local total_checks=$(grep -c "^- [✅❌⚠️]" "$REPORT_FILE" 2>/dev/null || echo "0")
    local successful_checks=$(grep -c "^- ✅" "$REPORT_FILE" 2>/dev/null || echo "0")
    local failed_checks=$(grep -c "^- ❌" "$REPORT_FILE" 2>/dev/null || echo "0")
    local warning_checks=$(grep -c "^- ⚠️" "$REPORT_FILE" 2>/dev/null || echo "0")
    
    # Insert summary at the beginning of the report
    local temp_file="/tmp/comicogs_report_temp.md"
    
    # Create summary section
    cat > "$temp_file" << EOF
# Comicogs Platform Verification Report
**Generated**: $TIMESTAMP  
**Branch**: $(git branch --show-current 2>/dev/null || echo "unknown")  
**Commit**: $(git rev-parse --short HEAD 2>/dev/null || echo "unknown")  

## Executive Summary

**Overall Status**: $([ $EXIT_CODE -eq 0 ] && echo "✅ PASSED" || echo "❌ FAILED")

- **Total Checks**: $total_checks
- **Successful**: $successful_checks ✅
- **Failed**: $failed_checks ❌  
- **Warnings**: $warning_checks ⚠️

### Verification Score: $(( (successful_checks * 100) / (total_checks > 0 ? total_checks : 1) ))%

EOF
    
    # Append the rest of the report
    tail -n +5 "$REPORT_FILE" >> "$temp_file"
    mv "$temp_file" "$REPORT_FILE"
    
    # Add recommendations section
    cat >> "$REPORT_FILE" << EOF

## Recommendations

$([ $failed_checks -gt 0 ] && echo "🚨 **Critical**: $failed_checks critical issues must be resolved before deployment" || echo "✅ **Ready**: No critical issues found")

$([ $warning_checks -gt 0 ] && echo "⚠️ **Warnings**: $warning_checks warnings should be reviewed and addressed" || echo "✅ **Clean**: No warnings found")

## Next Steps

1. **Review** any failed checks and resolve critical issues
2. **Address** warnings and recommendations  
3. **Test** the application manually in a staging environment
4. **Deploy** to production following the deployment checklist
5. **Monitor** application performance and error rates post-deployment

---
*Report generated by Comicogs Platform Verification Script v1.0*
EOF
}

# Main execution function
main() {
    log_info "🚀 Starting Comicogs Platform Verification..."
    log_info "Project root: $PROJECT_ROOT"
    log_info "Report will be saved to: $REPORT_FILE"
    
    # Initialize report
    init_report
    
    # Run verification steps
    check_prerequisites || return 1
    
    verify_repository
    verify_static_analysis
    verify_build
    verify_tests  
    verify_security
    verify_performance
    verify_database
    verify_environment
    
    # Generate final summary
    generate_summary
    
    # Display results
    echo ""
    log_info "📊 Verification completed!"
    log_info "Report saved to: $REPORT_FILE"
    
    if [ $EXIT_CODE -eq 0 ]; then
        log_success "🎉 All critical checks passed!"
    else
        log_error "💥 Some critical checks failed. Review the report for details."
    fi
    
    echo ""
    log_info "To view the full report:"
    echo "cat $REPORT_FILE"
    
    return $EXIT_CODE
}

# Run main function
main "$@"
