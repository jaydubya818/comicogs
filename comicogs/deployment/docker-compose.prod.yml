version: '3.9'

services:
  # Frontend (Next.js)
  frontend:
    build:
      context: ..
      dockerfile: Dockerfile.frontend
      target: production
    container_name: comicogs-frontend-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_SITE_URL=${NEXT_PUBLIC_SITE_URL}
      - NEXT_PUBLIC_SENTRY_DSN=${NEXT_PUBLIC_SENTRY_DSN}
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - comicogs-network

  # Backend (Express.js API)
  backend:
    build:
      context: ..
      dockerfile: Dockerfile.backend
      target: production
    container_name: comicogs-backend-prod
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - EMAIL_FROM=${EMAIL_FROM}
      - CRON_TOKEN=${CRON_TOKEN}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET=${S3_BUCKET}
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - comicogs-network

  # Worker (Background Jobs)
  worker:
    build:
      context: ..
      dockerfile: Dockerfile.backend
      target: production
    container_name: comicogs-worker-prod
    command: ["npm", "run", "worker"]
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - EMAIL_FROM=${EMAIL_FROM}
      - NEXT_PUBLIC_SITE_URL=${NEXT_PUBLIC_SITE_URL}
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - comicogs-network

  # Database (PostgreSQL)
  db:
    image: postgres:15-alpine
    container_name: comicogs-db-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-comicogs}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-comicogs}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - comicogs-network

  # Redis (Caching & Queues)
  redis:
    image: redis:7-alpine
    container_name: comicogs-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - comicogs-network

  # Nginx (Reverse Proxy & SSL)
  nginx:
    image: nginx:alpine
    container_name: comicogs-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/production.conf:/etc/nginx/conf.d/default.conf:ro
      - ../nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    networks:
      - comicogs-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  comicogs-network:
    driver: bridge
